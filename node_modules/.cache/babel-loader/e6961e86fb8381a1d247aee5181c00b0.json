{"ast":null,"code":"export const initialState = {\n  basket: []\n};\nexport const getBasketTotal = basket => basket === null || basket === void 0 ? void 0 : basket.reduce((amount, item) => item.price + amount, 0);\n\nconst reducer = (state, action) => {\n  console.log(action);\n\n  switch (action.type) {\n    case \"ADD_TO_BASKET\":\n      return { ...state,\n        basket: [...state.basket, action.item]\n      };\n\n    case \"REMOVE_FROM_BASKET\":\n      const index = state.basket.findIndex(basketItem => basketItem.id === action.id);\n      let newBasket = [...state.basket];\n\n      if (index >= 0) {\n        newBasket.splice(index, 1);\n      } else {\n        console.warn(`cant remove product (id: ${action.id}) as its not in the basket !`);\n      }\n\n    default:\n      return state;\n  }\n};\n\nexport default reducer;","map":{"version":3,"sources":["/Users/amritpalsingh/Desktop/ecomerce-store/src/reducer.js"],"names":["initialState","basket","getBasketTotal","reduce","amount","item","price","reducer","state","action","console","log","type","index","findIndex","basketItem","id","newBasket","splice","warn"],"mappings":"AACA,OAAO,MAAMA,YAAY,GAAG;AACxBC,EAAAA,MAAM,EAAC;AADiB,CAArB;AAIP,OAAO,MAAMC,cAAc,GAAGD,MAAD,IAC7BA,MAD6B,aAC7BA,MAD6B,uBAC7BA,MAAM,CAAEE,MAAR,CAAe,CAACC,MAAD,EAAQC,IAAR,KAAiBA,IAAI,CAACC,KAAL,GAAaF,MAA7C,EAAsD,CAAtD,CADO;;AAGP,MAAMG,OAAO,GAAG,CAACC,KAAD,EAASC,MAAT,KAAoB;AAChCC,EAAAA,OAAO,CAACC,GAAR,CAAYF,MAAZ;;AACJ,UAAQA,MAAM,CAACG,IAAf;AACI,SAAK,eAAL;AACI,aAAM,EACF,GAAGJ,KADD;AAEFP,QAAAA,MAAM,EAAC,CAAC,GAAGO,KAAK,CAACP,MAAV,EAAmBQ,MAAM,CAACJ,IAA1B;AAFL,OAAN;;AAIJ,SAAK,oBAAL;AACI,YAAMQ,KAAK,GAAGL,KAAK,CAACP,MAAN,CAAaa,SAAb,CACTC,UAAD,IAAgBA,UAAU,CAACC,EAAX,KAAkBP,MAAM,CAACO,EAD/B,CAAd;AAGA,UAAKC,SAAS,GAAG,CAAC,GAAGT,KAAK,CAACP,MAAV,CAAjB;;AACA,UAAIY,KAAK,IAAI,CAAb,EAAgB;AACZI,QAAAA,SAAS,CAACC,MAAV,CAAiBL,KAAjB,EAAwB,CAAxB;AACH,OAFD,MAEO;AACHH,QAAAA,OAAO,CAACS,IAAR,CACK,4BAA2BV,MAAM,CAACO,EAAG,8BAD1C;AAGH;;AACL;AACI,aAAOR,KAAP;AAnBR;AAsBC,CAxBD;;AA0BA,eAAeD,OAAf","sourcesContent":["\nexport const initialState = {\n    basket:[]\n};\n\nexport const getBasketTotal= (basket) =>\nbasket?.reduce((amount,item) => item.price + amount , 0) ;\n\nconst reducer = (state , action) => {\n    console.log(action);\nswitch (action.type) {\n    case \"ADD_TO_BASKET\":\n        return{\n            ...state,\n            basket:[...state.basket , action.item],\n        };\n    case \"REMOVE_FROM_BASKET\":\n        const index = state.basket.findIndex (\n            (basketItem) => basketItem.id === action.id\n        );\n        let  newBasket = [...state.basket];\n        if (index >= 0) {\n            newBasket.splice(index, 1);\n        } else {\n            console.warn (\n                `cant remove product (id: ${action.id}) as its not in the basket !`\n            )\n        }\n    default:\n        return state;\n}\n\n};\n\nexport default reducer; "]},"metadata":{},"sourceType":"module"}